import os
import asyncio
import zipfile

from telegram import Update, InputMediaPhoto
from telegram.constants import ChatAction
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import datetime



# üîê –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = os.environ.get("BOT_TOKEN")
# üìÅ –£–∫–∞–∂–∏ –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ç–æ

###############BASE_DIR = "/Users/sib-coder/Documents/—É—á–µ–±–∞/TGBOT/fotodir"
BASE_DIR = os.environ.get("BASE_DIR")

async def save_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.today().strftime('%Y-%m-%d')
    folder = os.path.join(BASE_DIR, today)
    os.makedirs(folder, exist_ok=True)

    if update.message.photo:
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        file_path = os.path.join(folder, f"{photo.file_id}.jpg")
        await file.download_to_drive(file_path)
        await update.message.reply_text("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ üì∏")
    else:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(BASE_DIR):
        await update.message.reply_text("–ü–∞–ø–æ–∫ –µ—â—ë –Ω–µ—Ç üìÅ")
        return

    lines = []
    for folder in os.listdir(BASE_DIR):
        folder_path = os.path.join(BASE_DIR, folder)
        if os.path.isdir(folder_path):
            count = len([f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))])
            lines.append(f"üìÇ {folder}: {count} —Ñ–æ—Ç–æ")

    message = "\n".join(lines) if lines else "–ü–∞–ø–æ–∫ —Å —Ñ–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ—Ç."
    await update.message.reply_text(message)



async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /get YYYY-MM-DD")
        return

    date_str = context.args[0]
    folder_path = os.path.join(BASE_DIR, date_str)

    if not os.path.exists(folder_path):
        await update.message.reply_text("‚ùå –ü–∞–ø–∫–∞ —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    files = [os.path.join(folder_path, f) for f in os.listdir(folder_path)
             if os.path.isfile(os.path.join(folder_path, f)) and f.lower().endswith(".jpg")]

    if not files:
        await update.message.reply_text("üòï –í –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–æ—Ç–æ.")
        return

    await update.message.chat.send_action(action=ChatAction.UPLOAD_PHOTO)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—á–∫–∏ –ø–æ 10 —Ñ–æ—Ç–æ (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∞–ª—å–±–æ–º—ã)
    chunk_size = 10
    for i in range(0, len(files), chunk_size):
        media_group = [InputMediaPhoto(open(photo, "rb")) for photo in files[i:i+chunk_size]]
        await update.message.reply_media_group(media=media_group)


async def zip_and_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /zip YYYY-MM-DD")
        return

    date_str = context.args[0]
    folder_path = os.path.join(BASE_DIR, date_str)

    if not os.path.exists(folder_path):
        await update.message.reply_text("‚ùå –ü–∞–ø–∫–∞ —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
    files = [os.path.join(folder_path, f) for f in os.listdir(folder_path)
             if os.path.isfile(os.path.join(folder_path, f)) and f.lower().endswith(".jpg")]

    if not files:
        await update.message.reply_text("üòï –í –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–æ—Ç–æ.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    zip_filename = f"{date_str}.zip"
    zip_filepath = os.path.join(BASE_DIR, zip_filename)

    with zipfile.ZipFile(zip_filepath, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file in files:
            zipf.write(file, os.path.basename(file))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(zip_filepath, "rb") as zip_file:
        await update.message.reply_document(document=zip_file, filename=zip_filename)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(zip_filepath)

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏ —è –ø–æ–ª–æ–∂—É –µ–≥–æ –≤ –ø–∞–ø–∫—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. 
    –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

    /info - –ü–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ —Å —Ñ–æ—Ç–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –∫–∞–∂–¥–æ–π.
    
    /get <–¥–∞—Ç–∞> - –û—Ç–ø—Ä–∞–≤–∏—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π. –ü—Ä–∏–º–µ—Ä: /get 2025-04-08
    
    /zip <–¥–∞—Ç–∞> - –°–æ–∂–º—ë—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π –≤ –∞—Ä—Ö–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ. –ü—Ä–∏–º–µ—Ä: /zip 2025-04-08
    
    /help - –ü–æ–∫–∞–∂–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
    """
    await update.message.reply_text(help_text)

def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ –∏ –∫–æ–º–∞–Ω–¥—É /info")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("get", get_photo))
    app.add_handler(CommandHandler("zip", zip_and_send))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(MessageHandler(filters.PHOTO, save_photo))


    # üöÄ –°—Ç–∞—Ä—Ç—É–µ–º (–±–µ–∑ asyncio.run)
    app.run_polling()

if __name__ == "__main__":
    main()
